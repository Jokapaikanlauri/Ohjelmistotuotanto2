@page "/destinations"
@using MatkakertomusGroupB.Shared.Models;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MatkakertomusGroupB.Shared
@inject IHttpClientFactory ClientFactory
@inject HttpClient Http
@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider asp
@inject ILogger<Destinations> logger
@inject NavigationManager nav


<PageTitle>Destinations</PageTitle>
<head>
	<link rel="icon" type="image/x-icon" href="globe.png" />
</head>

<h1>Destinations</h1>
<!--Tee tähän forms add buttonin taakse ja lisätyt matkakohteet näytetään tällä sivulla, poista ominaisuus
	toimii vain jos matkakohde on käyttäjän lisäämä
-->

<AuthorizeView>
	<Authorized>
		<div id="destinations-razor-auth-listing" class="left">
			@if (list != null)
			{
				@foreach (Destination d in list)
				{
					<div class="list-item destination-item">
						<DestinationItem Destination="@d">
							<ul>
								<h4>@d.Name</h4>
								<li>Country: @d.Country</li>
								<li>Municipality: @d.Municipality</li>
								<li>Description: @d.Description</li>
								<br>
								@if (d.Image != null)
								{
									<img src="data:image/png;base64,@d.Image" style="max-width:70%" />

									<br>
									<br>
								}

								@if (@d.Stories == null)
								{
									<button class="btn btn-warning" @onclick='()=>nav.NavigateTo($"/destination/edit/{d.DestinationId}")'>Edit</button>
								}
							</ul>
						</DestinationItem>
					</div>
					<br />
				}
			}
		</div>
		<div class="right">
			<DestinationAdd id="@userId" RefreshParent="@RefreshList" @ref="destinationAddReference" />
		</div>
	</Authorized>
	<NotAuthorized>
		<div id="destinations-razor-public-listing" class="left">
			@if (list != null)
			{
				@foreach (Destination d in list)
				{
					<div id="@($"{d.Name}-div")" class="list-item">
						<DestinationItem Destination="@d">
							<h4>@d.Name</h4>
							<li>Country: @d.Country</li>
							<li>Municipality: @d.Municipality</li>
							<li>Description: @d.Description</li>
							<br>
							@if (d.Image != null)
							{
								<img id="@($"{d.Name}-picture")" src="data:image/png;base64,@d.Image" style="max-width:70%" />

								<br>
								<br>
							}
						</DestinationItem>
					</div>
					<br />
				}
			}
		</div>
	</NotAuthorized>
</AuthorizeView>




@code {
	//private UserDTO? userDTO = new UserDTO();
	//private UserDTO? userDTO2 = new UserDTO();
	private string? name = null;
	private string? nickname = null;
	private string? userId = null;
	private List<Destination>? list = null;
	public List<Picture>? pics;

	//reference to the child component
	private DestinationAdd destinationAddReference;


	protected override async Task OnInitializedAsync()
	{
		//Get data (list)
		await GetData();
	}

	/// <summary>
	/// Fetching of data in its seperate function
	/// </summary>
	/// <returns></returns>
	private async Task GetData()
	{
		//Assing name to variable for future operations
		var authState = await asp.GetAuthenticationStateAsync();
		name = authState.User.Identity.Name;

		var client = ClientFactory.CreateClient("public");
		list = await client.GetFromJsonAsync<List<Destination>>($"/api/destination");
		pics = await client.GetFromJsonAsync<List<Picture>>($"/api/picture");

		//var response = await Http.PostAsJsonAsync<UserDTO>($"/api/traveller/nick", userDTO);
		if (name != null)
		{
			//Fetch user data from API via POST operation
			var response = await Http.PostAsJsonAsync<UserDTO>($"/api/traveller/nick", new UserDTO(name));
			//Parse user data from API
			var userDTO = await response.Content.ReadFromJsonAsync<UserDTO>();
			nickname = userDTO.Nickname;
		}
	}


	private async void RefreshList()
	{
		// Update the list
		await GetData();

		// Call StateHasChanged to trigger a re-render
		StateHasChanged();

		//Set the child notification value to display OK message.
		await destinationAddReference.SetaddedAsTrue();
	}


	private async Task GetUserId()
	{
		logger.LogInformation($"I'm a template logging message");

		if (name != null)
		{
			//Fetch user data from API via POST operation
			var response = await Http.PostAsJsonAsync<UserDTO>($"/api/traveller/id", new UserDTO(name));
			//Parse user data from API
			var userDTO = await response.Content.ReadFromJsonAsync<UserDTO>();
			userId = userDTO.Id;
		}
	}
}
