@page "/"

@using MatkakertomusGroupB.Shared.Models;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MatkakertomusGroupB.Shared
@inject HttpClient Http
@inject AuthenticationStateProvider asp
@inject ILogger<Destinations> logger

<PageTitle>Etusivu</PageTitle>

<div id="index-razor">
	<AuthorizeView>
		<Authorized>
			<div id="index-razor-auth" class="divi">
				<h1>Etusivu</h1>
			</div>
			<div>
				<p id="teksti">Tämän sivuston avulla voit jakaa matkakokemuksesi muiden matkustuksesta kiinnostuneiden kanssa. Nauti intohimostasi muiden kanssa ja sytytä matkailun kipinä uudelleen!.</p>
			</div>
		</Authorized>

		<NotAuthorized>
			<div id="index-razor-public" class="divi">
				<h1>Tervetuloa Matkakertomus sivustolle!</h1>
			</div>
			<p id="notlogged">
				Muistathan <a href="authentication/login" title="og in">kirjautua</a>
				tai <a href="authentication/register" title="Register">rekisteröidä</a> uuden tilin.
			</p>
			<p id="teksti">Tämän sivuston avulla voit jakaa matkakokemuksesi muiden matkustuksesta kiinnostuneiden kanssa. Nauti intohimostasi muiden kanssa ja sytytä matkailun kipinä uudelleen!.</p>
		</NotAuthorized>
	</AuthorizeView>

	<img id="kuva" src="/travel.jpg" />
</div>


@code {
	//private UserDTO? userDTO = new UserDTO();
	//private UserDTO? userDTO2 = new UserDTO();
	private string? name = null;
	private string? nickname = null;

	protected override async Task OnInitializedAsync()
	{
		//Assing name to variable for future operations
		var authState = await asp.GetAuthenticationStateAsync();
		name = authState.User.Identity.Name;

		//var response = await Http.PostAsJsonAsync<UserDTO>($"/api/traveller/nick", userDTO);
		if (name != null)
		{
			//Fetch user data from API via POST operation
			var response = await Http.PostAsJsonAsync<UserDTO>($"/api/traveller/nick", new UserDTO(name));
			//Parse user data from API
			var userDTO = await response.Content.ReadFromJsonAsync<UserDTO>();
			nickname = userDTO.Nickname;
		}
	}
}
