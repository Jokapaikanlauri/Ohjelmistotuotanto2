@page "/destination/edit/{DestinationId:int}"
@using MatkakertomusGroupB.Shared.Models;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MatkakertomusGroupB.Shared
@using System.Text;
@using System.Drawing;
@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider asp
@inject NavigationManager nav

<h3>Matkakohteen muokkaus</h3>

@if (@dDTO != null)
{
	<div id="destinationEdit-razor-form">
		<EditDestination>
			<EditForm Model="@dDTO" OnValidSubmit="@Save">
				<DataAnnotationsValidator />
				<ValidationSummary />

				<label>Nimi</label>
				<br />
				<InputText id="Input_Name" @bind-Value="dDTO.Name" placeholder="Nimi.." />
				<br />
				<br />
				<label>Maa</label>
				<br />
				<InputText id="Input_Country" @bind-Value="dDTO.Country" placeholder="Maa.." />
				<br />
				<br />
				<label>Paikkakunta</label>
				<br />
				<InputText id="Input_Municipality" @bind-Value="dDTO.Municipality" placeholder="Paikkakunta.." />
				<br />
				<br />
				<label>Kuvaus</label>
				<br />
				<InputTextArea id="Input_Description" @bind-Value="dDTO.Description" placeholder="Kuvaus.." style="width:20%" />
				<br />
				<br />

				<label>Kuva</label>
				<InputFile id="Input_Image" OnChange="@OnInputFileChange" style="max-width:100%" multiple />
				<br />

				@if (dDTO.Image != null)
				{
					<img id="@($"destpic-{dDTO.Name}")" src="data:image/png;base64,@dDTO.Image" style="max-width:40%" />
				}
				<br />
				<br />

				<button id="navbackButton" class="btn btn-success" type="button" @onclick='()=>nav.NavigateTo($"/destinations")'>
					<span class="oi oi-eject" aria-hidden="true"> Takaisin matkakohteisiin</span>
				</button>
				<button id="editSubmitButton" type="submit" class="btn btn-warning">
					<span class="oi oi-check" aria-hidden="true"> Tallenna muutokset</span>
				</button>
				<button id="deleteDestinationButton" class="btn btn-danger" type="button" @onclick="@Delete">
					<span class="oi oi-delete" aria-hidden="true"> Poista</span>
				</button>

			</EditForm>
		</EditDestination>
	</div>
}

@if (edited)
{
	<div id="destinationd-edited-alert" class="alert alert-success fade-in" role="alert">
		Muutokset matkakohteeseen tallennettu onnistuneesti!
	</div>
}
@if (deleted)
{
	<div id="destinationd-edited-alert" class="alert alert-success fade-in" role="alert">
		Matkakohde poistettu onnistuneesti!
	</div>
}


@if (failed)
{
	<div id="destinationd-edited-alert" class="alert alert-danger fade-in" role="alert">
		Odottamaton virhe tallennettaessa muutoksia!
	</div>
}

@if (deleteFailed)
{
	<div id="destinationd-edited-alert" class="alert alert-danger fade-in" role="alert">
		Virhe poistettaessa, matkakohteeseen liittyy tarinoita!
	</div>
}

@if (editFailed)
{
	<div id="destinationd-edited-alert" class="alert alert-danger fade-in" role="alert">
		Virhe tallennettaessa muutoksia, matkakohteeseen liittyy tarinoita!
	</div>
}


@code {
	[Parameter]
	public int DestinationId { get; set; }

	public DestinationDTO? dDTO = new();

	private List<string> fileNames = new();
	private List<IBrowserFile> loadedFiles = new();
	public List<DestinationDTO>? search = null;

	public int id = 1;
	private int maxAllowedFiles = 3;
	private long maxFileSize = 1024 * 1024 * 15; // 15Mt

	public bool nameExists = false;
	public bool edited = false;
	public bool editFailed = false;
	public bool failed = false;
	public bool deleted = false;
	public bool deleteFailed = false;
	protected override async Task OnInitializedAsync()
	{

		dDTO = await Http.GetFromJsonAsync<DestinationDTO>($"/api/destination/{DestinationId}");
	}

	async Task Save()
	{
		editFailed = deleteFailed = failed = deleted = edited = false;
		dDTO.DestinationId = DestinationId;
		var res = await Http.PutAsJsonAsync<DestinationDTO>($"/api/destination/{DestinationId}", dDTO);
		if (res.IsSuccessStatusCode)
		{
			edited = true;
			
			Console.WriteLine(res);
		}
		else
		{
			editFailed = true;
			Console.WriteLine(res);
		}
		StateHasChanged();
	}

	async Task Delete()
	{
		editFailed = deleteFailed = failed = deleted = edited = false;
		var res = await Http.DeleteAsync($"/api/destination/{DestinationId}");
		if (res.IsSuccessStatusCode)
		{
			Console.WriteLine(res);
			nav.NavigateTo($"/destinations");
			deleted = true;
		}

		else
		{
			deleteFailed = true;
			Console.WriteLine(res);
			
		}
	}

	private async Task OnInputFileChange(InputFileChangeEventArgs args)
	{
		string base64String = "";

		try
		{
			// here we will loop all the files that have been selected for upload
			// this won't be necessary for traveller and destination, they only have one picture each
			var files = args.GetMultipleFiles();
			foreach (var file in files)
			{
				// abbreviation fs for memorystream
				await using MemoryStream fs = new MemoryStream();

				// we'll open readstreamer for each individual file
				await file.OpenReadStream(maxAllowedSize: 1048576).CopyToAsync(fs);

				// this will call GetBytes function to convert the streamed file into bytes
				byte[] somBytes = GetBytes(fs);

				// here we finally convert the returned bytes to base64string
				base64String = Convert.ToBase64String(somBytes, 0, somBytes.Length);
				dDTO.Image = base64String;
			}

		}

		catch (Exception e)
		{
			System.Diagnostics.Debug.Print("ERROR: " + e.Message + Environment.NewLine);
		}

		// var newUploadResults = await res.Content.ReadFromJsonAsync<List<UploadResult>>();
	}
	public static byte[] GetBytes(Stream stream)
	{
		var bytes = new byte[stream.Length];
		stream.Seek(0, SeekOrigin.Begin);
		stream.ReadAsync(bytes, 0, bytes.Length);
		stream.Dispose();
		return bytes;
	}
}
