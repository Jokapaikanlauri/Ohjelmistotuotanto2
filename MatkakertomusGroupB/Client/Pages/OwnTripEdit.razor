@page "/trip/edit/{TripId:int}"
@using MatkakertomusGroupB.Shared.Models;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MatkakertomusGroupB.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider asp
@inject NavigationManager nav

<h1>Muokkaa matkaa</h1>

<div id="ownTripEdit-razor" class="left">
    @if (@tDTO != null)
    {
        <EditTrip>
            <EditForm Model="@tDTO" OnValidSubmit="@Save">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <label>Alkupäivämäärä:</label>
                <br />
                <InputDate id="Input_Trip_Edit_StartDate" @bind-Value="tDTO.DatumStart" />
                <br /> <br />
                <label>Loppupäivämäärä:</label>
                <br />
                <InputDate id="Input_Trip_Edit_EndDate" @bind-Value="tDTO.DatumEnd" />
                <br /> <br />
                <label>Rastita jos yksityinen: </label>
                <InputCheckbox id="Input_Trip_Edit_Private" @bind-Value="tDTO.Private" />
                <br /><br />
                <p>HUOM! Matkan poisto poistaa myös kaikki siihen liittyvät tarinat ja kuvat!!!</p>
                <br />
                <button id="navbackButton" class="btn btn-success" type="button" @onclick='()=>nav.NavigateTo($"/trips")'>
                    <span class="oi oi-eject" aria-hidden="true"> Takaisin matkoihin</span>
                    </button>
                <button id="editSubmit-trip" type="submit" class="btn btn-warning">
                    <span class="oi oi-check" aria-hidden="true"> Tallenne muutokset</span>
                    </button>
                <button id="deleteTripButton" class="btn btn-danger" type="button" @onclick="@Delete">
                    <span class="oi oi-delete" aria-hidden="true"> Poista</span>
                    </button>
                <br /><br/>
            </EditForm>
        </EditTrip>
        <br /><br/>
    }
    @if (edited)
    {
        <div id="trip-edit-saved-alert" class="alert alert-success fade-in" role="alert">
            Muutokset matkaan tallennettiin onnistuneesti!
        </div>
    }

        @if (deleted)
    {
        <div id="trip-edit-saved-alert" class="alert alert-success fade-in" role="alert">
            Matka poistettiin onnistuneesti!
        </div>
    }
        @if (failed)
    {
        <div id="trip-edit-saved-alert" class="alert alert-danger fade-in" role="alert">
            Muutosten tallentaminen matkaan epäonnistui! Jos ongelma toistuu ota yhteys tukipalveluun
        </div>
    }
    @if (deleteFailed)
    {
        <div id="trip-edit-saved-alert" class="alert alert-danger fade-in" role="alert">
            Matkan poistaminen epäonnistui. Jos ongelma toistuu ota yhteys tukipalveluun
        </div>
    }

</div>
<div id="storyadd-div" class="right">
    <StoryAdd TripId="@TripId" />
</div
<div id="storylist-div" class="left">
  <StoryList TripId="@TripId" UserId="@userId" />
</div>




@code {
    [Parameter]
    public int TripId { get; set; }

    public string? userId = null;
    public TripDTO? tDTO = new();
    public bool edited = false;
    public bool failed = false;
    public bool deleted = false;
	public bool deleteFailed = false;


    protected override async Task OnInitializedAsync()
    {
        //Get the trip to edit
        tDTO = await Http.GetFromJsonAsync<TripDTO>($"/api/trip/{TripId}");
        
		//Assing name to variable for future operations
		var authState = await asp.GetAuthenticationStateAsync();
		string? name = authState.User.Identity.Name;

        if (name != null)
        {
            //Fetch user data from API via POST operation
            var res = await Http.PostAsJsonAsync<UserDTO>($"/api/traveller/id", new UserDTO(name));
            //Parse user data from API
            var userDTO = await res.Content.ReadFromJsonAsync<UserDTO>();
            userId = userDTO.Id;
        }
    }

    async Task Save()
    {
        tDTO.TripId = TripId;
        //post a new trip
        var res = await Http.PutAsJsonAsync<TripDTO>($"/api/trip/{TripId}", tDTO);
        if (res.IsSuccessStatusCode)
        {
            edited = true;
            deleteFailed = failed = deleted = false;
            Console.WriteLine(res);
        }
        else
        {
            failed = true;
            edited = failed = deleted = false;
            Console.WriteLine(res);
        }
        StateHasChanged();
    }

    async Task Delete()
    {
        List<Story> storyList = await Http.GetFromJsonAsync<List<Story>>($"/api/story/trip/{TripId}");
        foreach (Story story in storyList)
        {
            var picres = await Http.DeleteAsync($"/api/picture/story/{story.StoryId}");
            if (picres.IsSuccessStatusCode)
            {
                Console.WriteLine(picres);
            }
            else
            {
                failed = true;
                Console.WriteLine(picres);
            }
        }
        var res = await Http.DeleteAsync($"/api/trip/{TripId}");
        if (res.IsSuccessStatusCode)
        {
            Console.WriteLine(res);
            nav.NavigateTo($"/trips");
            			deleted = true;
			edited = failed = deleteFailed = false;
        }
        else
        {
            deleteFailed = true;
            Console.WriteLine(res);
            edited = failed = deleted = false;
        }
    }
}
