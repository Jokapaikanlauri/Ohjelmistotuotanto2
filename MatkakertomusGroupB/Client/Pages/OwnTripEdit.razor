@page "/trip/edit/{TripId:int}"
@using MatkakertomusGroupB.Shared.Models;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MatkakertomusGroupB.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider asp
@inject NavigationManager nav

<div class="left">

    <h3>Edit trip</h3>

    @if (@tDTO != null)
    {
        <EditTrip>
            <EditForm Model="@tDTO" OnValidSubmit="@Save">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <br />
                <label>Start date:</label>
                <br />
                <InputDate @bind-Value="tDTO.DatumStart" />
                <br /> <br />
                <label>End date:</label>
                <br />
                <InputDate @bind-Value="tDTO.DatumEnd" />
                <br /> <br />
                <label>Check the box if trip is private: </label>
                <InputCheckbox @bind-Value="tDTO.Private" />
                <br /><br />
                <p>Deleting the trip will also delete all the stories and pictures attached to it!!!</p>
                <br />
                <button class="btn btn-primary" @onclick='()=>nav.NavigateTo($"/trips")'>Back to trips</button>
                <button type="submit" class="btn btn-success">Edit trip</button>
                <button class="btn btn-danger" @onclick="@Delete">Delete</button>
                <br />
            </EditForm>
        </EditTrip>
    }
    @if (edited)
    {
        <div class="alert alert-success fade-in" role="alert">
            Trip was edited successfully!
        </div>
    }
    @if (failed)
    {
        <div class="alert alert-danger fade-in" role="alert">
            This is a failed alert—check it out!
        </div>
    }

    <StoryAdd tripId="TripId" />
</div>



@code {
    [Parameter]
    public int TripId { get; set; }

    public TripDTO? tDTO = new();
    public bool edited = false;
    public bool failed = false;


    protected override async Task OnInitializedAsync()
    {
        //Get the trip to edit
        tDTO = await Http.GetFromJsonAsync<TripDTO>($"/api/trip/{TripId}");
    }

    async Task Save()
    {
        tDTO.TripId = TripId;
        //post a new trip
        var res = await Http.PutAsJsonAsync<TripDTO>($"/api/trip/{TripId}", tDTO);
        if (res.IsSuccessStatusCode)
        {
            edited = true;
            Console.WriteLine(res);
        }
        else
        {
            failed = true;
            Console.WriteLine(res);
        }
        StateHasChanged();
    }

    async Task Delete()
    {
        List<Story> storyList = await Http.GetFromJsonAsync<List<Story>>($"/api/story/trip/{TripId}");
        foreach (Story story in storyList)
        {
            var picres = await Http.DeleteAsync($"/api/picture/story/{story.StoryId}");
            if (picres.IsSuccessStatusCode)
            {
                Console.WriteLine(picres);
            }
            else
            {
                failed = true;
                Console.WriteLine(picres);
            }
        }
        var res = await Http.DeleteAsync($"/api/trip/{TripId}");
        if (res.IsSuccessStatusCode)
        {
            Console.WriteLine(res);
            nav.NavigateTo($"/trips");
        }
        else
        {
            failed = true;
            Console.WriteLine(res);
        }
    }
}
