@using MatkakertomusGroupB.Shared.Models;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using MatkakertomusGroupB.Shared
@attribute [Authorize]
@inject HttpClient Http
@inject AuthenticationStateProvider asp
@inject NavigationManager nav


<h4>Liitä uusi tarina matkaan</h4>
<NewStory>
	<EditForm Model="@sDTO" OnValidSubmit="@Save">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<label>Matkakohde:</label>
		<br />
		<InputSelect @bind-Value="sDTO.DestinationId">
			@if (destinations == null)
			{
				<option selected value="">Matkakohteita ei saatavilla</option>
			}
			else
			{
				@foreach (DestinationDTO d in destinations)
				{
					<option selected value="@d.DestinationId">@d.Name</option>
				}
			}
		</InputSelect>
		<br /> <br />
		<label>Päivämäärä:</label>
		<br />
		<InputDate id="Input_Story_Datum" @bind-Value="sDTO.Datum" />
		<br /> <br />
		<label>Kerro tarinasi: </label> <br />
		<InputTextArea id="Input_Story_Description" @bind-Value="sDTO.Description" style="width:100%" />
		<br /><br />
		<button id="addSubmit-story" type="submit" class="btn btn-success">
			<span class="oi oi-plus" aria-hidden="true"> Lisää tarina matkaasi</span>
		</button>
	</EditForm>
</NewStory>
<p>Kun olet lisännyt matkan voi lisätä kuvasi siihen</p>

@if (added)
{
	<div id="story-added-alert" class="alert alert-success fade-in" role="alert">
		Uusi matka lisätty onnistuneesti!
	</div>
}
@if (failed)
{
	<div id="story-added-alert" class="alert alert-danger fade-in" role="alert">
		Muutosten tallentaminen epäonnistui. Jos ongelma toistuu ota yhteys tukeen!
	</div>
}


@code {
	[Parameter]
	public int TripId { get; set; }

	public List<DestinationDTO>? destinations = null;
	public StoryDTO sDTO = new();
	public bool added = false;
	public bool failed = false;

	protected override async Task OnInitializedAsync()
	{
		//Get list of all destinations
		destinations = await Http.GetFromJsonAsync<List<DestinationDTO>>($"/api/destination");
		sDTO.Datum = DateTime.Now;
		DestinationDTO dest = destinations.Last<DestinationDTO>();
		if (dest.DestinationId != null) sDTO.DestinationId = Convert.ToInt32(dest.DestinationId);
	}

	async Task Save()
	{
		failed = false;
		added = false;
		sDTO.TripId = TripId;
		//post a new story
		var res = await Http.PostAsJsonAsync<StoryDTO>($"/api/story", sDTO);
		sDTO = await res.Content.ReadFromJsonAsync<StoryDTO>();

		if (res.IsSuccessStatusCode)
		{
			added = true;
			Console.WriteLine(res);
			if (sDTO.StoryId != null) nav.NavigateTo($"/story/edit/{sDTO.StoryId}");
		}
		else
		{
			failed = true;
			Console.WriteLine(res);
		}
	}
}
