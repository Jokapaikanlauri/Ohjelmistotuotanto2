// <auto-generated />
using System;
using Matkakertomus_webapp_GroupB.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MatkakertomuswebappGroupB.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230210180348_IdentityCreate")]
    partial class IdentityCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("Matkakertomus_webapp_GroupB.Data.Kuva", b =>
                {
                    b.Property<int>("KuvaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Kuvanimi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TarinaId")
                        .HasColumnType("INTEGER");

                    b.HasKey("KuvaId");

                    b.HasIndex("TarinaId");

                    b.ToTable("Kuvat");
                });

            modelBuilder.Entity("Matkakertomus_webapp_GroupB.Data.Matka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Alkupvm")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Loppupvm")
                        .HasColumnType("TEXT");

                    b.Property<int>("MatkaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MatkaajaId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Yksityinen")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MatkaajaId");

                    b.ToTable("Matkat");
                });

            modelBuilder.Entity("Matkakertomus_webapp_GroupB.Data.Matkaaja", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Esittely")
                        .HasColumnType("TEXT");

                    b.Property<string>("Etunimi")
                        .HasColumnType("TEXT");

                    b.Property<string>("Kuva")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("Paikkakunta")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sukunimi")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Matkakertomus_webapp_GroupB.Data.Matkakohde", b =>
                {
                    b.Property<int>("MatkakohdeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Kuva")
                        .HasColumnType("TEXT");

                    b.Property<string>("Kuvaus")
                        .HasColumnType("TEXT");

                    b.Property<string>("Maa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nimi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Paikkakunta")
                        .HasColumnType("TEXT");

                    b.HasKey("MatkakohdeId");

                    b.ToTable("Matkakohteet");
                });

            modelBuilder.Entity("Matkakertomus_webapp_GroupB.Data.Tarina", b =>
                {
                    b.Property<int>("TarinaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MatkaId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MatkakohdeId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Pvm")
                        .HasColumnType("TEXT");

                    b.Property<string>("Teksti")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TarinaId");

                    b.HasIndex("MatkaId");

                    b.HasIndex("MatkakohdeId");

                    b.ToTable("Tarinat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Matkakertomus_webapp_GroupB.Data.Kuva", b =>
                {
                    b.HasOne("Matkakertomus_webapp_GroupB.Data.Tarina", "Tarina")
                        .WithMany()
                        .HasForeignKey("TarinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tarina");
                });

            modelBuilder.Entity("Matkakertomus_webapp_GroupB.Data.Matka", b =>
                {
                    b.HasOne("Matkakertomus_webapp_GroupB.Data.Matkaaja", "Matkaaja")
                        .WithMany()
                        .HasForeignKey("MatkaajaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matkaaja");
                });

            modelBuilder.Entity("Matkakertomus_webapp_GroupB.Data.Tarina", b =>
                {
                    b.HasOne("Matkakertomus_webapp_GroupB.Data.Matka", "Matka")
                        .WithMany()
                        .HasForeignKey("MatkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Matkakertomus_webapp_GroupB.Data.Matkakohde", "Matkakohde")
                        .WithMany()
                        .HasForeignKey("MatkakohdeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matka");

                    b.Navigation("Matkakohde");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Matkakertomus_webapp_GroupB.Data.Matkaaja", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Matkakertomus_webapp_GroupB.Data.Matkaaja", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Matkakertomus_webapp_GroupB.Data.Matkaaja", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Matkakertomus_webapp_GroupB.Data.Matkaaja", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
